{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","bossFacing","setBossFacing","bossCleaveSide","setBossCleaveSide","edgeClonePos","setEdgeClonePos","cornerClonePos","setCornerClonePos","cleaveTimeout","setCleaveTimeout","attackTimeout","setAttackTimeout","progressBarInterval","setProgressBarInterval","cleaveSideRevealed","setCleaveSideRevealed","zonesRevealed","setZonesRevealed","castDuration","setCastDuration","cleave","setProgressStartTime","Date","now","onReveal","reveal","setCurrentTime","clearTimers","currentTime","progressStartTime","updateProgressBar","window","clearTimeout","onReset","reset","castbarProgressStyle","width","Math","min","className","onClick","style","cleaveSide","random","rotationOffset","floor","edgeCloneSide","setTimeout","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.020809a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\n\ntype CleaveSide = 'left' | 'right'\n\nfunction App(): JSX.Element {\n\tconst [bossFacing, setBossFacing] = useState<number>(90)\n\tconst [bossCleaveSide, setBossCleaveSide] = useState<CleaveSide | null>(null)\n\tconst [edgeClonePos, setEdgeClonePos] = useState<number | null>(null)\n\tconst [cornerClonePos, setCornerClonePos] = useState<number | null>(null)\n\tconst [cleaveTimeout, setCleaveTimeout] = useState<number | null>(null)\n\tconst [attackTimeout, setAttackTimeout] = useState<number | null>(null)\n\tconst [progressBarInterval, setProgressBarInterval] = useState<number | null>(null)\n\tconst [cleaveSideRevealed, setCleaveSideRevealed] = useState<boolean>(false)\n\tconst [zonesRevealed, setZonesRevealed] = useState<boolean>(false)\n\tconst [castDuration, setCastDuration] = useState<number>(1)\n\n\tconst onSimulate = () => {\n\t\tonReset()\n\n\t\tconst cleaveSide: CleaveSide = Math.random() < 0.5 ? 'left' : 'right'\n\n\t\tconst rotationOffset = Math.floor(Math.random() * 8)\n\t\tsetBossFacing(rotationOffset * 45)\n\t\tsetBossCleaveSide(cleaveSide)\n\n\t\tconst edgeCloneSide = Math.random() < 0.5 ? 'left' : 'right'\n\t\tconst edgeClonePos = edgeCloneSide === 'left' ? 90 : 270\n\n\t\tlet cornerClonePos = 135\n\t\tif (edgeCloneSide === 'left') {\n\t\t\tcornerClonePos = 45\n\t\t}\n\n\t\tif (Math.random() < 0.5) {\n\t\t\tcornerClonePos += 180\n\t\t}\n\t\tsetEdgeClonePos((edgeClonePos + rotationOffset * 45) % 360)\n\t\tsetCornerClonePos((cornerClonePos + rotationOffset * 45) % 360)\n\n\t\tsetCleaveTimeout(window.setTimeout(() => cleave(), 3000))\n\t\tsetAttackTimeout(window.setTimeout(() => reveal(), 13000))\n\t\tsetProgressBarInterval(window.setInterval(() => updateProgressBar(), 10))\n\t\tsetCastDuration(3000)\n\t\tsetProgressStartTime(Date.now())\n\t}\n\n\tconst cleave = () => {\n\t\tsetCleaveSideRevealed(true)\n\t\tsetCastDuration(10000)\n\t\tsetProgressStartTime(Date.now())\n\t}\n\n\tconst onReveal = () => {\n\t\treveal()\n\t\tsetCurrentTime(Date.now() + 15000)\n\t\tclearTimers()\n\t}\n\n\tconst reveal = () => {\n\t\tsetZonesRevealed(true)\n\t}\n\n\tconst [currentTime, setCurrentTime] = useState<number>(0)\n\tconst [progressStartTime, setProgressStartTime] = useState<number | null>(null)\n\tconst updateProgressBar = () => {\n\t\tsetCurrentTime(Date.now())\n\t}\n\n\tconst clearTimers = () => {\n\t\tif (cleaveTimeout) {\n\t\t\twindow.clearTimeout(cleaveTimeout)\n\t\t}\n\t\tif (attackTimeout) {\n\t\t\twindow.clearTimeout(attackTimeout)\n\t\t}\n\t\tif (progressBarInterval) {\n\t\t\twindow.clearTimeout(progressBarInterval)\n\t\t}\n\t}\n\n\tconst onReset = () => {\n\t\tclearTimers()\n\t\treset()\n\t}\n\n\tconst reset = () => {\n\t\tsetBossFacing(90)\n\t\tsetBossCleaveSide(null)\n\t\tsetEdgeClonePos(null)\n\t\tsetCornerClonePos(null)\n\t\tsetCleaveSideRevealed(false)\n\t\tsetZonesRevealed(false)\n\t\tsetProgressStartTime(null)\n\t}\n\n\tconst castbarProgressStyle = {\n\t\twidth: `${progressStartTime ? Math.min(1, (currentTime - progressStartTime) / castDuration) * 100 : 0}%`,\n\t}\n\n\treturn (\n\t\t<div className=\"outer-container\">\n\t\t\t<div className=\"arena-container\">\n\t\t\t\t<div className=\"arena\">\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-a\">\n\t\t\t\t\t\tA\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-b\">\n\t\t\t\t\t\tB\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-c\">\n\t\t\t\t\t\tC\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-d\">\n\t\t\t\t\t\tD\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-one\">\n\t\t\t\t\t\t1\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-two\">\n\t\t\t\t\t\t2\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-three\">\n\t\t\t\t\t\t3\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className=\"safe-marker pos-four\">\n\t\t\t\t\t\t4\n\t\t\t\t\t</div>\n\t\t\t\t\t<div onClick={() => onReveal()} className={`boss facing-${bossFacing}`}>\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"boss-image\" />\n\t\t\t\t\t\t\t{bossCleaveSide && (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t{cleaveSideRevealed && <div className={`boss-cleave boss-cleave-${bossCleaveSide}`} />}\n\t\t\t\t\t\t\t\t\t{zonesRevealed && <div className={`boss-cleave-reveal boss-cleave-${bossCleaveSide}`} />}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</>\n\t\t\t\t\t</div>\n\t\t\t\t\t{edgeClonePos !== null && (\n\t\t\t\t\t\t<div className={`clone position-${edgeClonePos}`}>\n\t\t\t\t\t\t\t<div className=\"clone-image\" />\n\t\t\t\t\t\t\t{zonesRevealed && <div className={`boss-cleave-reveal boss-cleave-${bossCleaveSide}`} />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{cornerClonePos !== null && (\n\t\t\t\t\t\t<div className={`clone position-${cornerClonePos}`}>\n\t\t\t\t\t\t\t<div className=\"clone-image\" />\n\t\t\t\t\t\t\t{zonesRevealed && <div className={`boss-cleave-reveal boss-cleave-${bossCleaveSide}`} />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"controls\">\n\t\t\t\t<div className=\"castbar-container\">\n\t\t\t\t\t<span className=\"ability-name\">\n\t\t\t\t\t\t{edgeClonePos === null && '-'}\n\t\t\t\t\t\t{edgeClonePos !== null && cleaveSideRevealed && 'The Art of Darkness'}\n\t\t\t\t\t\t{edgeClonePos !== null && !cleaveSideRevealed && '(Delay after Summon)'}\n\t\t\t\t\t</span>\n\t\t\t\t\t<div className=\"castbar\">\n\t\t\t\t\t\t<div className=\"castbar-progress\" style={castbarProgressStyle} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t<button onClick={onSimulate}>Start</button>\n\t\t\t\t\t<button onClick={onReset}>Reset</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): any => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry)\n\t\t\tgetFID(onPerfEntry)\n\t\t\tgetFCP(onPerfEntry)\n\t\t\tgetLCP(onPerfEntry)\n\t\t\tgetTTFB(onPerfEntry)\n\t\t})\n\t}\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}